/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.austral.dissis.valueobject;

import org.junit.jupiter.api.Test;

import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class JavaTimeTests {
    @Test
    void shouldBeTheSameDateWhenIsTheSameObject() {
        final Instant instance = Instant.parse("2021-01-01T00:00:00Z");
        
        assertEquals(instance, instance);
    }
    
    @Test
    void shouldBeTheSameDateWhenHasTheSameValue() {
        final Instant instance1 = Instant.parse("2021-01-01T00:00:00Z");
        final Instant instance2 = Instant.parse("2021-01-01T00:00:00Z");
        
        assertEquals(instance1, instance2);
    }
    
    @Test
    void shouldNotBeTheSameDateWhenHasDifferentValue() {
        final Instant instance1 = Instant.parse("2021-01-01T00:00:00Z");
        final Instant instance2 = Instant.parse("2022-01-01T00:00:00Z");
        
        assertNotEquals(instance1, instance2);
    }
    
    @Test
    void demonstrateImmutability() {
        // Value objects are immutable - operations return new instances
        final Instant original = Instant.parse("2021-01-01T00:00:00Z");
        final Instant modified = original.plus(1, ChronoUnit.DAYS);
        
        assertNotEquals(original, modified); // They're different instants
        assertEquals(Instant.parse("2021-01-01T00:00:00Z"), original); // Original didn't change
        assertEquals(Instant.parse("2021-01-02T00:00:00Z"), modified); // New object has expected value
    }
    
    @Test
    void demonstrateHashCodeConsistency() {
        // Equal objects must have equal hash codes (contract of Value Objects)
        final Instant instant1 = Instant.parse("2021-01-01T00:00:00Z");
        final Instant instant2 = Instant.parse("2021-01-01T00:00:00Z");
        
        assertEquals(instant1.hashCode(), instant2.hashCode());
        
        // Value objects work well as Map keys
        final Map<Instant, String> timeMap = new HashMap<>();
        timeMap.put(instant1, "New Year 2021");
        
        assertEquals("New Year 2021", timeMap.get(instant2));
    }
    
    @Test
    void demonstrateDifferentTypeComparisons() {
        // Different value object types are not equal even with "similar" logical values
        final LocalDate date = LocalDate.of(2021, 1, 1);
        final LocalDateTime dateTime = LocalDateTime.of(2021, 1, 1, 0, 0);
        
        assertNotEquals(date, dateTime);
        
        // But equality works across same type instantiated different ways
        final LocalDate date1 = LocalDate.of(2021, 1, 1);
        final LocalDate date2 = LocalDate.parse("2021-01-01");
        
        assertEquals(date1, date2);
    }
}
